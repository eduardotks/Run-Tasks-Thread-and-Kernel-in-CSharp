
@{
    ViewData["Title"] = "Thread";
}


<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous">

    <meta charset="utf-8">

    <title>Blank template</title>

    <!-- Load external CSS styles -->
    <link rel="stylesheet" href="styles.css">

    <style>
        button {
            width: -webkit-fill-available;
        }

        #inputFirst {
            display: inline-table !important;
        }

        #inputSec {
            display: inline-table !important;
        }
    </style>
</head>

<body style="background-color: #DCDCDC">
    <br />
    <center><h1>Funcionamento de Thread - Modo Usuário</h1></center>
    <br />
    <div style="border:1px solid black;border-radius: 14px;padding: 29px;">

        <div class="row">
            <div class="col-md-3" id="inputFirst">
            </div>
            <div class="col-md-2" id="inputFirst">
                <label for="thread_1" class="form-label">Thread 1</label>
                <input type="text" id="thread_1" placeholder="" style="border-radius: 6px; height: 43px;">
            </div>
            <div class="col-md-2" id="inputFirst">
                <label for="thread_2" class="form-label">Thread 2</label>
                <input type="text" id="thread_2" placeholder="" style="border-radius: 6px; height: 43px; ">
            </div>
            <div class="col-md-2" id="inputFirst">
                <label for="thread_3" class="form-label">Thread 3</label>
                <input type="text" id="thread_3" placeholder="" style="border-radius: 6px; height: 43px;">
            </div>
            <div class="col-md-3" id="inputFirst">
            </div>
        </div>
        <br />
        <div class="row">

            <div class="col-md-3" id="inputSec"></div>
            <div class="col-md-2" id="inputSec">
                <label for="prioridade1Id" class="form-label">Prioridade 1 (ms)</label><br />
                <select class="form-select" id="prioridade1Id" name="select" style="width: 182px;">
                    <option value="" selected>Selecione...</option>
                    <option value="1">Highest</option>
                    <option value="2">AboveNormal</option>
                    <option value="3">Normal</option>
                    <option value="4">BelowNormal</option>
                    <option value="5">Lowest</option>
                </select>
            </div>
            <div class="col-md-2" id="inputSec">
                <label for="prioridade2Id" class="form-label">Prioridade 2 (ms)</label><br />
                <select class="form-select" id="prioridade2Id" name="select" style="width: 182px;">
                    <option value="" selected>Selecione...</option>
                    <option value="1">Highest</option>
                    <option value="2">AboveNormal</option>
                    <option value="3">Normal</option>
                    <option value="4">BelowNormal</option>
                    <option value="5">Lowest</option>
                </select>
            </div>
            <div class="col-md-2" id="inputSec">
                <label for="prioridade3Id" class="form-label">Prioridade 3 (ms)</label><br />
                <select class="form-select" id="prioridade3Id" name="select" style="width: 182px;">
                    <option value="" selected>Selecione...</option>
                    <option value="1">Highest</option>
                    <option value="2">AboveNormal</option>
                    <option value="3">Normal</option>
                    <option value="4">BelowNormal</option>
                    <option value="5">Lowest</option>
                </select>
            </div>
            <div class="col-md-3" id="inputSec"></div>
        </div>
        <br />
        <br />
        <br />
        <br />
        <div class="row">
            <div class="col-md-3">
                <label for="tempoId" class="form-label">Tempo(ms)</label><br />
                <input type="number" id="tempoId" style="border-radius: 5px; height: 39px;">
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-3">
                <label for="numeroProcesso" class="form-label">Número de Processos</label><br />
                <input type="number" id="numeroProcesso" style="border-radius: 5px; height: 39px;">
            </div>
        </div>

        <br />
        <br />
        <br />

        <div class="row">
            <div class="col-md-3">
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-success" onclick="chamaMetodo();">Iniciar</button>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-danger" onclick="finalizaMetodo();">Finalizar</button>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-warning" onclick="limpaCampos();">Limpar</button>
            </div>
            <div class="col-md-3">
            </div>
        </div>
    </div>


    <script>

        function chamaMetodo() {
            Swal.fire({
                title: 'Deseja iniciar?',
                text: '',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sim!'
            }).then((result) => {
                //--
                if ($('#tempoId').val() == "") {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'error',
                            title: 'Falta preencher o tempo.'
                        })
                        return false;
                }
                if ($('#numeroProcesso').val() == "") {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'error',
                            title: 'Falta preencher o número de processo.'
                        })
                        return false;
                }
                if ($('#prioridade1Id').val() == "" || $('#prioridade2Id').val() == "" || $('#prioridade3Id').val() == "") {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'error',
                            title: 'Falta selecionar as prioridades dos processos.'
                        })
                        return false;
                }

                    //--

                var i = 0;
                var j = 0;

                var data = {
                    tempo: $('#tempoId').val(),
                    qtdProcessso: $('#numeroProcesso').val(),
                    prioridade1: $('#prioridade1Id').val(),
                    prioridade2: $('#prioridade2Id').val(),
                    prioridade3: $('#prioridade3Id').val()
                }
                    $.ajax({
                    url: '/ThreadPageUser/Execucao/',
                    type: 'POST',
                    data: data,
                    success: function (result) {
                        if (result.sucesso)
                        {

                            

                            

                            for (i; i < 3; i++) {
                                for (j; j < data.qtdProcessso; j++) {
                                    $("thread_1").val(result.thread);
                                    $("thread_2").val(result.thread);
                                    $("thread_3").val(result.thread);
                                }
                            }

                            console.log(result.thread)
                        }
                        else
                        {
                            //swal("Alerta!", res.mensagemErro, "error").then(function() {});
                        }
                    }
                });
            
            }).catch(function () {
                console.log('Cancelado!');
            });
                /*
                if ($('#tempoId').val() == "") {
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    })

                    Toast.fire({
                        icon: 'error',
                        title: 'Falta preencher o tempo.'
                    })
                }
                */

                //var cod_x = $(this).parent().find('td').attr('CodigoTela');
               /* let data = {
                    tempo = $('#tempoId').val(),
                    qtdProcessso = $('#numeroProcesso').val(),
                    prioridade1 = $('#prioridade1Id').val(),
                    prioridade2 = $('#prioridade2Id').val(),
                    prioridade3 = $('#prioridade3Id').val()
                }
                $.ajax({
                    url: '/ThreadPageUser/Execucao/',
                    type: 'POST',
                    data: data,
                    success: function (result) {
                        if (result.sucesso)
                        {
                            //swal("Sucesso!", "Iniciado!!!", "success").then(function () {});
                        }
                        else
                        {
                            //swal("Alerta!", res.mensagemErro, "error").then(function() {});
                        }
                    }
                });
            }).catch(function () {
                console.log('Cancelado!');
            });*/
        }


        function finalizaMetodo() {

        }

        function limpaCampos() {
            finalizaMetodo();

        }
    </script>
</body>